// <auto-generated />
using System;
using Bulky.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bulky.DataAccess.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250812133611_UpdateCategory2")]
    partial class UpdateCategory2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bulky.Models.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            IsHidden = false,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            IsHidden = false,
                            Name = "Books"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            IsHidden = false,
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 4,
                            DisplayOrder = 4,
                            IsHidden = false,
                            Name = "Home & Kitchen"
                        },
                        new
                        {
                            Id = 5,
                            DisplayOrder = 5,
                            IsHidden = false,
                            Name = "Toys"
                        },
                        new
                        {
                            Id = 6,
                            DisplayOrder = 6,
                            IsHidden = false,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 7,
                            DisplayOrder = 7,
                            IsHidden = false,
                            Name = "Health"
                        },
                        new
                        {
                            Id = 8,
                            DisplayOrder = 8,
                            IsHidden = false,
                            Name = "Beauty"
                        },
                        new
                        {
                            Id = 9,
                            DisplayOrder = 9,
                            IsHidden = false,
                            Name = "Automotive"
                        },
                        new
                        {
                            Id = 10,
                            DisplayOrder = 10,
                            IsHidden = false,
                            Name = "Music"
                        });
                });

            modelBuilder.Entity("Bulky.Models.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Springfield",
                            Email = "contact@acmesolutions.com",
                            Name = "Acme Solutions",
                            PhoneNumber = "217-555-0101",
                            PostalCode = "62701",
                            State = "IL",
                            StreetAddress = "123 Maple St"
                        },
                        new
                        {
                            Id = 2,
                            City = "Denver",
                            Email = "info@brightfuturetech.com",
                            Name = "Bright Future Tech",
                            PhoneNumber = "303-555-0202",
                            PostalCode = "80202",
                            State = "CO",
                            StreetAddress = "456 Oak Ave"
                        },
                        new
                        {
                            Id = 3,
                            City = "Austin",
                            Email = "support@nexusenterprises.com",
                            Name = "Nexus Enterprises",
                            PhoneNumber = "512-555-0303",
                            PostalCode = "78701",
                            State = "TX",
                            StreetAddress = "789 Pine Rd"
                        },
                        new
                        {
                            Id = 4,
                            City = "Seattle",
                            Email = "hello@horizoninnovations.com",
                            Name = "Horizon Innovations",
                            PhoneNumber = "206-555-0404",
                            PostalCode = "98101",
                            State = "WA",
                            StreetAddress = "101 Birch Ln"
                        },
                        new
                        {
                            Id = 5,
                            City = "Boston",
                            Email = "contact@pinnaclesystems.com",
                            Name = "Pinnacle Systems",
                            PhoneNumber = "617-555-0505",
                            PostalCode = "02108",
                            State = "MA",
                            StreetAddress = "234 Cedar Dr"
                        },
                        new
                        {
                            Id = 6,
                            City = "Chicago",
                            Email = "info@summitconsulting.com",
                            Name = "Summit Consulting",
                            PhoneNumber = "312-555-0606",
                            PostalCode = "60601",
                            State = "IL",
                            StreetAddress = "567 Elm St"
                        },
                        new
                        {
                            Id = 7,
                            City = "Portland",
                            Email = "support@vanguardsolutions.com",
                            Name = "Vanguard Solutions",
                            PhoneNumber = "503-555-0707",
                            PostalCode = "97201",
                            State = "OR",
                            StreetAddress = "890 Walnut Ave"
                        },
                        new
                        {
                            Id = 8,
                            City = "Miami",
                            Email = "contact@apexdynamics.com",
                            Name = "Apex Dynamics",
                            PhoneNumber = "305-555-0808",
                            PostalCode = "33101",
                            State = "FL",
                            StreetAddress = "321 Spruce Way"
                        },
                        new
                        {
                            Id = 9,
                            City = "Phoenix",
                            Email = "info@quantumventures.com",
                            Name = "Quantum Ventures",
                            PhoneNumber = "602-555-0909",
                            PostalCode = "85001",
                            State = "AZ",
                            StreetAddress = "654 Sycamore St"
                        },
                        new
                        {
                            Id = 10,
                            City = "Atlanta",
                            Email = "hello@coreinnovations.com",
                            Name = "Core Innovations",
                            PhoneNumber = "404-555-1010",
                            PostalCode = "30301",
                            State = "GA",
                            StreetAddress = "987 Magnolia Blvd"
                        },
                        new
                        {
                            Id = 11,
                            City = "Houston",
                            Email = "support@strivetech.com",
                            Name = "Strive Technologies",
                            PhoneNumber = "713-555-1111",
                            PostalCode = "77002",
                            State = "TX",
                            StreetAddress = "147 Chestnut Dr"
                        },
                        new
                        {
                            Id = 12,
                            City = "San Francisco",
                            Email = "contact@optimagroup.com",
                            Name = "Optima Group",
                            PhoneNumber = "415-555-1212",
                            PostalCode = "94102",
                            State = "CA",
                            StreetAddress = "258 Willow Ln"
                        },
                        new
                        {
                            Id = 13,
                            City = "New York",
                            Email = "info@nextgensolutions.com",
                            Name = "NextGen Solutions",
                            PhoneNumber = "212-555-1313",
                            PostalCode = "10001",
                            State = "NY",
                            StreetAddress = "369 Laurel St"
                        },
                        new
                        {
                            Id = 14,
                            City = "Los Angeles",
                            Email = "support@eliteenterprises.com",
                            Name = "Elite Enterprises",
                            PhoneNumber = "323-555-1414",
                            PostalCode = "90001",
                            State = "CA",
                            StreetAddress = "741 Poplar Ave"
                        },
                        new
                        {
                            Id = 15,
                            City = "Dallas",
                            Email = "hello@fusiondynamics.com",
                            Name = "Fusion Dynamics",
                            PhoneNumber = "214-555-1515",
                            PostalCode = "75201",
                            State = "TX",
                            StreetAddress = "852 Ash Rd"
                        });
                });

            modelBuilder.Entity("Bulky.Models.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.Property<int>("orderHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("orderHeaderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Bulky.Models.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("PaymentDueDate")
                        .HasColumnType("date");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("Bulky.Models.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ListPrice")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<double>("price100")
                        .HasColumnType("float");

                    b.Property<double>("price50")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Jon Skeet",
                            CategoryId = 2,
                            Description = "Advanced guide to C# programming.",
                            DisplayOrder = 0,
                            ISBN = "9781617294532",
                            ImageUrl = "",
                            ListPrice = 59.990000000000002,
                            Name = "C# in Depth",
                            price = 54.990000000000002,
                            price100 = 44.990000000000002,
                            price50 = 49.990000000000002
                        },
                        new
                        {
                            Id = 2,
                            Author = "Andrew Lock",
                            CategoryId = 2,
                            Description = "Comprehensive guide to building web apps with ASP.NET Core.",
                            DisplayOrder = 0,
                            ISBN = "9781617294617",
                            ImageUrl = "",
                            ListPrice = 64.989999999999995,
                            Name = "ASP.NET Core in Action",
                            price = 59.990000000000002,
                            price100 = 49.990000000000002,
                            price50 = 54.990000000000002
                        },
                        new
                        {
                            Id = 3,
                            Author = "Robert C. Martin",
                            CategoryId = 2,
                            Description = "A Handbook of Agile Software Craftsmanship.",
                            DisplayOrder = 0,
                            ISBN = "9780132350884",
                            ImageUrl = "",
                            ListPrice = 49.990000000000002,
                            Name = "Clean Code",
                            price = 44.990000000000002,
                            price100 = 34.990000000000002,
                            price50 = 39.990000000000002
                        },
                        new
                        {
                            Id = 4,
                            Author = "Erich Gamma et al.",
                            CategoryId = 2,
                            Description = "Elements of Reusable Object-Oriented Software.",
                            DisplayOrder = 0,
                            ISBN = "9780201633610",
                            ImageUrl = "",
                            ListPrice = 54.990000000000002,
                            Name = "Design Patterns",
                            price = 49.990000000000002,
                            price100 = 39.990000000000002,
                            price50 = 44.990000000000002
                        },
                        new
                        {
                            Id = 5,
                            Author = "Andrew Hunt & David Thomas",
                            CategoryId = 2,
                            Description = "Your Journey to Mastery.",
                            DisplayOrder = 0,
                            ISBN = "9780135957059",
                            ImageUrl = "",
                            ListPrice = 44.990000000000002,
                            Name = "The Pragmatic Programmer",
                            price = 39.990000000000002,
                            price100 = 29.989999999999998,
                            price50 = 34.990000000000002
                        },
                        new
                        {
                            Id = 6,
                            Author = "Adam Freeman",
                            CategoryId = 2,
                            Description = "Best practices and performance optimization for EF Core.",
                            DisplayOrder = 0,
                            ISBN = "9781484287486",
                            ImageUrl = "",
                            ListPrice = 69.989999999999995,
                            Name = "Pro Entity Framework Core 7",
                            price = 64.989999999999995,
                            price100 = 54.990000000000002,
                            price50 = 59.990000000000002
                        },
                        new
                        {
                            Id = 7,
                            Author = "Douglas Crockford",
                            CategoryId = 2,
                            Description = "Deep dive into the best features of JavaScript.",
                            DisplayOrder = 0,
                            ISBN = "9780596517748",
                            ImageUrl = "",
                            ListPrice = 39.990000000000002,
                            Name = "JavaScript: The Good Parts",
                            price = 34.990000000000002,
                            price100 = 24.989999999999998,
                            price50 = 29.989999999999998
                        },
                        new
                        {
                            Id = 8,
                            Author = "Kyle Simpson",
                            CategoryId = 2,
                            Description = "Understanding JavaScript deeply.",
                            DisplayOrder = 0,
                            ISBN = "9781098124045",
                            ImageUrl = "",
                            ListPrice = 34.990000000000002,
                            Name = "You Don’t Know JS Yet",
                            price = 29.989999999999998,
                            price100 = 19.989999999999998,
                            price50 = 24.989999999999998
                        },
                        new
                        {
                            Id = 9,
                            Author = "Alan Beaulieu",
                            CategoryId = 2,
                            Description = "Master SQL for data management and analysis.",
                            DisplayOrder = 0,
                            ISBN = "9781492057611",
                            ImageUrl = "",
                            ListPrice = 49.990000000000002,
                            Name = "Learning SQL",
                            price = 44.990000000000002,
                            price100 = 34.990000000000002,
                            price50 = 39.990000000000002
                        },
                        new
                        {
                            Id = 10,
                            Author = "Nigel Poulton",
                            CategoryId = 2,
                            Description = "Comprehensive Docker reference.",
                            DisplayOrder = 0,
                            ISBN = "9781521822807",
                            ImageUrl = "",
                            ListPrice = 54.990000000000002,
                            Name = "Docker Deep Dive",
                            price = 49.990000000000002,
                            price100 = 39.990000000000002,
                            price50 = 44.990000000000002
                        },
                        new
                        {
                            Id = 11,
                            Author = "Chris Richardson",
                            CategoryId = 2,
                            Description = "With examples in Java and Spring.",
                            DisplayOrder = 0,
                            ISBN = "9781617294549",
                            ImageUrl = "",
                            ListPrice = 64.989999999999995,
                            Name = "Microservices Patterns",
                            price = 59.990000000000002,
                            price100 = 49.990000000000002,
                            price50 = 54.990000000000002
                        },
                        new
                        {
                            Id = 12,
                            Author = "Eric Freeman",
                            CategoryId = 2,
                            Description = "A brain-friendly guide to design patterns.",
                            DisplayOrder = 0,
                            ISBN = "9781492078005",
                            ImageUrl = "",
                            ListPrice = 59.990000000000002,
                            Name = "Head First Design Patterns",
                            price = 54.990000000000002,
                            price100 = 44.990000000000002,
                            price50 = 49.990000000000002
                        },
                        new
                        {
                            Id = 13,
                            Author = "Brendan Burns",
                            CategoryId = 2,
                            Description = "Dive into Kubernetes cluster management.",
                            DisplayOrder = 0,
                            ISBN = "9781492046530",
                            ImageUrl = "",
                            ListPrice = 64.989999999999995,
                            Name = "Kubernetes Up & Running",
                            price = 59.990000000000002,
                            price100 = 49.990000000000002,
                            price50 = 54.990000000000002
                        },
                        new
                        {
                            Id = 14,
                            Author = "Eric Matthes",
                            CategoryId = 2,
                            Description = "A hands-on introduction to programming.",
                            DisplayOrder = 0,
                            ISBN = "9781593279288",
                            ImageUrl = "",
                            ListPrice = 44.990000000000002,
                            Name = "Python Crash Course",
                            price = 39.990000000000002,
                            price100 = 29.989999999999998,
                            price50 = 34.990000000000002
                        },
                        new
                        {
                            Id = 15,
                            Author = "Luciano Ramalho",
                            CategoryId = 2,
                            Description = "Clear, concise, and effective programming in Python.",
                            DisplayOrder = 0,
                            ISBN = "9781492056355",
                            ImageUrl = "",
                            ListPrice = 64.989999999999995,
                            Name = "Fluent Python",
                            price = 59.990000000000002,
                            price100 = 49.990000000000002,
                            price50 = 54.990000000000002
                        },
                        new
                        {
                            Id = 16,
                            Author = "Martin Fowler",
                            CategoryId = 2,
                            Description = "Improving the design of existing code.",
                            DisplayOrder = 0,
                            ISBN = "9780134757599",
                            ImageUrl = "",
                            ListPrice = 69.989999999999995,
                            Name = "Refactoring",
                            price = 64.989999999999995,
                            price100 = 54.990000000000002,
                            price50 = 59.990000000000002
                        },
                        new
                        {
                            Id = 17,
                            Author = "Eric Evans",
                            CategoryId = 2,
                            Description = "Tackling complexity in the heart of software.",
                            DisplayOrder = 0,
                            ISBN = "9780321125217",
                            ImageUrl = "",
                            ListPrice = 74.989999999999995,
                            Name = "Domain-Driven Design",
                            price = 69.989999999999995,
                            price100 = 59.990000000000002,
                            price50 = 64.989999999999995
                        },
                        new
                        {
                            Id = 18,
                            Author = "Mike Cohn",
                            CategoryId = 2,
                            Description = "Mastering Agile project estimation.",
                            DisplayOrder = 0,
                            ISBN = "9780131479418",
                            ImageUrl = "",
                            ListPrice = 49.990000000000002,
                            Name = "Agile Estimating and Planning",
                            price = 44.990000000000002,
                            price100 = 34.990000000000002,
                            price50 = 39.990000000000002
                        },
                        new
                        {
                            Id = 19,
                            Author = "Jez Humble",
                            CategoryId = 2,
                            Description = "Reliable software releases through automation.",
                            DisplayOrder = 0,
                            ISBN = "9780321601919",
                            ImageUrl = "",
                            ListPrice = 64.989999999999995,
                            Name = "Continuous Delivery",
                            price = 59.990000000000002,
                            price100 = 49.990000000000002,
                            price50 = 54.990000000000002
                        },
                        new
                        {
                            Id = 20,
                            Author = "Betsy Beyer",
                            CategoryId = 2,
                            Description = "How Google runs production systems.",
                            DisplayOrder = 0,
                            ISBN = "9781491929124",
                            ImageUrl = "",
                            ListPrice = 74.989999999999995,
                            Name = "Site Reliability Engineering",
                            price = 69.989999999999995,
                            price100 = 59.990000000000002,
                            price50 = 64.989999999999995
                        });
                });

            modelBuilder.Entity("Bulky.Models.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Bulky.Models.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Bulky.Models.Models.OrderDetail", b =>
                {
                    b.HasOne("Bulky.Models.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bulky.Models.Models.OrderHeader", "orderHeader")
                        .WithMany()
                        .HasForeignKey("orderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("orderHeader");
                });

            modelBuilder.Entity("Bulky.Models.Models.OrderHeader", b =>
                {
                    b.HasOne("Bulky.Models.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Bulky.Models.Models.Product", b =>
                {
                    b.HasOne("Bulky.Models.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Bulky.Models.Models.ShoppingCart", b =>
                {
                    b.HasOne("Bulky.Models.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bulky.Models.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bulky.Models.Models.ApplicationUser", b =>
                {
                    b.HasOne("Bulky.Models.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
